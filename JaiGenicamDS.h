/*----- PROTECTED REGION ID(JaiGenicamDS.h) ENABLED START -----*/
//=============================================================================
//
// file :        JaiGenicamDS.h
//
// description : Include file for the JaiGenicamDS class
//
// project :     JaiGenicamDS
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef JaiGenicamDS_H
#define JaiGenicamDS_H

#include <tango.h>
#include <string>
#include <map>
//#include "JaiGenicamConnection.h"
#include "JaiGenicamCameraControl.h"

//namespace JaiGenicamConnection_ns
//	{
//		class JaiGenicamConnection;	
//	};

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS.h

/**
 *  JaiGenicamDS class description:
 *    Control of Jai Genicam cameras
 */

namespace JaiGenicamDS_ns
{
/*----- PROTECTED REGION ID(JaiGenicamDS::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
	

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::Additional Class Declarations

class JaiGenicamDS : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(JaiGenicamDS::Data Members) ENABLED START -----*/

//	Add your own data members
private:
	map<std::string, ::JaiGenicamCameraControl_ns::GenicamGenericNode> node_map;
	std::mutex attr_mutex;
	uint16_t** image_buffers_p;
	std::vector<Tango::DevULong> image_width_v;
	std::vector<Tango::DevULong> image_height_v;
	uint16_t n_buffers;
	std::mutex buffer_mutex;
	int write_lock_buffer_ind;
	int read_lock_buffer_ind;
	int last_lock_buffer_ind;

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::Data Members

//	Device property data members
public:
	//	id_number:	Id of the camera, used to identify it on the network. 
	//  Type ip address or serial number of the camera.
	string	id_number;
	//	gain_node_name:	Name of gain node in the camera genicam node tree.
	//  Normally ``Gain`` or ``GainRaw``.
	string	gain_node_name;
	//	exposuretime_node_name:	Name of exposuretime node in camera genicam node tree. 
	//  Normally ``ExposureTime`` or ``ExposureTimeAbs``
	string	exposuretime_node_name;
	//	triggersource_node_name:	Name of trigger source node in camera genicam node tree. 
	//  Normally ``TriggerSource`
	string	triggersource_node_name;
	//	triggermode_node_name:	Name of trigger mode node in camera genicam node tree. 
	//  Normally ``TriggerMode``
	string	triggermode_node_name;
	//	width_node_name:	Name of image width node in camera genicam node tree. 
	//  Normally ``Width``
	string	width_node_name;
	//	height_node_name:	Name of image height node in camera genicam node tree. 
	//  Normally ``Height``
	string	height_node_name;
	//	offsetx_node_name:	Name of image offset x node in camera genicam node tree. 
	//  Normally ``OffsetX``
	string	offsetx_node_name;
	//	offsety_node_name:	Name of image offset y node in camera genicam node tree. 
	//  Normally ``OffsetY``
	string	offsety_node_name;
	//	pixelformat_node_name:	Name of pixelformat node in camera genicam node tree. 
	//  Normally ``PixelFormat``
	string	pixelformat_node_name;
	//	packetdelay_node_name:	Name of packet delay node in the camera genicam node tree.
	//  Normally ``GevSCPD``
	string	packetdelay_node_name;
	//	additional_node_list:	Add node names in this array for additional nodes to map to attributes.
	//  Nodes are added in string pairs, the first being the node name and the
	//  second being the node type (DoubleDynAttr, LongDynAttr, StringDynAttr).
	//  
	//  Enumerated type should be specified as StringDynAttr.
	//  
	//  Ex.: 
	//  TriggerDelay
	//  DoubleDynAttr
	vector<string>	additional_node_list;
	//	framerate_node_name:	Name of framerate node in the camera genicam node tree.
	//  Normally ``AcquisitionFrameRate`` or ``AcquisitionFrameRateAbs``
	string	framerate_node_name;
	//	node_preset_values:	Add node names in this array for additional nodes that should have preset values.
	//  Nodes are added in string pairs, the first being the node name and the
	//  second being the value.
	//  
	//  Enumerated node are specified with the enumeration name. 
	//  Boolean nodes are specified with an integer (0=false, 1=true).
	//  
	//  Ex.: 
	//  AcquisitionFrameRateEnabled
	//  1
	vector<string>	node_preset_values;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevDouble	*attr_ExposureTime_read;
	Tango::DevDouble	*attr_Gain_read;
	Tango::DevDouble	*attr_FrameRate_read;
	Tango::DevString	*attr_TriggerSource_read;
	Tango::DevLong64	*attr_FrameCounter_read;
	Tango::DevString	*attr_TriggerMode_read;
	Tango::DevULong	*attr_ImageHeight_read;
	Tango::DevULong	*attr_ImageWidth_read;
	Tango::DevULong	*attr_ImageOffsetX_read;
	Tango::DevULong	*attr_ImageOffsetY_read;
	Tango::DevString	*attr_PixelFormat_read;
	Tango::DevULong	*attr_PacketDelay_read;
	Tango::DevUShort	*attr_Image_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	JaiGenicamDS(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	JaiGenicamDS(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	JaiGenicamDS(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~JaiGenicamDS() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : JaiGenicamDS::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : JaiGenicamDS::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute ExposureTime related methods
 *	Description: Exposure time of the capture in milliseconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ExposureTime(Tango::Attribute &attr);
	virtual void write_ExposureTime(Tango::WAttribute &attr);
	virtual bool is_ExposureTime_allowed(Tango::AttReqType type);
/**
 *	Attribute Gain related methods
 *	Description: Camera gain value. The unit depends on the specific camera implementation.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Gain(Tango::Attribute &attr);
	virtual void write_Gain(Tango::WAttribute &attr);
	virtual bool is_Gain_allowed(Tango::AttReqType type);
/**
 *	Attribute FrameRate related methods
 *	Description: Frame rate of the camera when free running
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_FrameRate(Tango::Attribute &attr);
	virtual void write_FrameRate(Tango::WAttribute &attr);
	virtual bool is_FrameRate_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerSource related methods
 *	Description: Select if external (true) or internal (false) triggering is to be used.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_TriggerSource(Tango::Attribute &attr);
	virtual void write_TriggerSource(Tango::WAttribute &attr);
	virtual bool is_TriggerSource_allowed(Tango::AttReqType type);
/**
 *	Attribute FrameCounter related methods
 *	Description: Counts number of frames captured since starting acquisition. 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
	virtual void read_FrameCounter(Tango::Attribute &attr);
	virtual bool is_FrameCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerMode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_TriggerMode(Tango::Attribute &attr);
	virtual void write_TriggerMode(Tango::WAttribute &attr);
	virtual bool is_TriggerMode_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageHeight related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_ImageHeight(Tango::Attribute &attr);
	virtual void write_ImageHeight(Tango::WAttribute &attr);
	virtual bool is_ImageHeight_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageWidth related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_ImageWidth(Tango::Attribute &attr);
	virtual void write_ImageWidth(Tango::WAttribute &attr);
	virtual bool is_ImageWidth_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageOffsetX related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_ImageOffsetX(Tango::Attribute &attr);
	virtual void write_ImageOffsetX(Tango::WAttribute &attr);
	virtual bool is_ImageOffsetX_allowed(Tango::AttReqType type);
/**
 *	Attribute ImageOffsetY related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_ImageOffsetY(Tango::Attribute &attr);
	virtual void write_ImageOffsetY(Tango::WAttribute &attr);
	virtual bool is_ImageOffsetY_allowed(Tango::AttReqType type);
/**
 *	Attribute PixelFormat related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_PixelFormat(Tango::Attribute &attr);
	virtual void write_PixelFormat(Tango::WAttribute &attr);
	virtual bool is_PixelFormat_allowed(Tango::AttReqType type);
/**
 *	Attribute PacketDelay related methods
 *	Description: Controls the delay (in GEV timestamp counter unit) to insert between
 *               each packet for this stream channel.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_PacketDelay(Tango::Attribute &attr);
	virtual void write_PacketDelay(Tango::WAttribute &attr);
	virtual bool is_PacketDelay_allowed(Tango::AttReqType type);
/**
 *	Attribute Image related methods
 *	Description: Latest captured image
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image max = 4096 x 4096
 */
	virtual void read_Image(Tango::Attribute &attr);
	virtual bool is_Image_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : JaiGenicamDS::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command start related method
	 *	Description: Start camera acquisition
	 *
	 */
	virtual void start();
	virtual bool is_start_allowed(const CORBA::Any &any);
	/**
	 *	Command stop related method
	 *	Description: Stop camera acquisition
	 *
	 */
	virtual void stop();
	virtual bool is_stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: Disconnect from camera (e.g. to allow other software to use it)
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command On related method
	 *	Description: Connect to camera
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command GetCameraList related method
	 *	Description: 
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_camera_list();
	virtual bool is_GetCameraList_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Send reset command to camera. There is a chance that 
	 *               this clears a hung camera.
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNodeMap related method
	 *	Description: 
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_node_map();
	virtual bool is_GetNodeMap_allowed(const CORBA::Any &any);


/*----- PROTECTED REGION ID(JaiGenicamDS::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
private:
	bool attribute_info_init_flag;
	::JaiGenicamCameraControl_ns::JaiGenicamCameraControl* camera_connection;
	void update_attribute_info(std::string genicam_name, std::string tango_attribute_name, bool set_memorized);
	void update_attribute_info(::JaiGenicamCameraControl_ns::GenicamGenericNode generic_node);
	void update_state(::JaiGenicamCameraControl_ns::CameraState camera_state);
	void update_status(std::string camera_status);
	void update_error(::JaiGenicamCameraControl_ns::GenicamErrorStruct error_data);
	void update_image(int framecounter);
	void JaiGenicamDS::write_presets();

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::Additional Method prototypes
};

/*----- PROTECTED REGION ID(JaiGenicamDS::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::Additional Classes Definitions

}	//	End of namespace

#endif   //	JaiGenicamDS_H
