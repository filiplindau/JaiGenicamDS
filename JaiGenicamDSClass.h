/*----- PROTECTED REGION ID(JaiGenicamDSClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        JaiGenicamDSClass.h
//
// description : Include for the JaiGenicamDS root class.
//               This class is the singleton class for
//                the JaiGenicamDS device class.
//               It contains all properties and methods which the 
//               JaiGenicamDS requires only once e.g. the commands.
//
// project :     JaiGenicamDS
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef JaiGenicamDSClass_H
#define JaiGenicamDSClass_H

#include <tango.h>
#include <JaiGenicamDS.h>


/*----- PROTECTED REGION END -----*/	//	JaiGenicamDSClass.h


namespace JaiGenicamDS_ns
{
/*----- PROTECTED REGION ID(JaiGenicamDSClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	JaiGenicamDSClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute ExposureTime class definition
class ExposureTimeAttrib: public Tango::Attr
{
public:
	ExposureTimeAttrib():Attr("ExposureTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ExposureTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_ExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_ExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_ExposureTime_allowed(ty);}
};

//	Attribute Gain class definition
class GainAttrib: public Tango::Attr
{
public:
	GainAttrib():Attr("Gain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~GainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_Gain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_Gain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_Gain_allowed(ty);}
};

//	Attribute FrameRate class definition
class FrameRateAttrib: public Tango::Attr
{
public:
	FrameRateAttrib():Attr("FrameRate",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FrameRateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_FrameRate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_FrameRate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_FrameRate_allowed(ty);}
};

//	Attribute TriggerSource class definition
class TriggerSourceAttrib: public Tango::Attr
{
public:
	TriggerSourceAttrib():Attr("TriggerSource",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~TriggerSourceAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_TriggerSource(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_TriggerSource(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_TriggerSource_allowed(ty);}
};

//	Attribute FrameCounter class definition
class FrameCounterAttrib: public Tango::Attr
{
public:
	FrameCounterAttrib():Attr("FrameCounter",
			Tango::DEV_LONG64, Tango::READ) {};
	~FrameCounterAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_FrameCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_FrameCounter_allowed(ty);}
};

//	Attribute TriggerMode class definition
class TriggerModeAttrib: public Tango::Attr
{
public:
	TriggerModeAttrib():Attr("TriggerMode",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~TriggerModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_TriggerMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_TriggerMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_TriggerMode_allowed(ty);}
};

//	Attribute ImageHeight class definition
class ImageHeightAttrib: public Tango::Attr
{
public:
	ImageHeightAttrib():Attr("ImageHeight",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~ImageHeightAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_ImageHeight(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_ImageHeight(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_ImageHeight_allowed(ty);}
};

//	Attribute ImageWidth class definition
class ImageWidthAttrib: public Tango::Attr
{
public:
	ImageWidthAttrib():Attr("ImageWidth",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~ImageWidthAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_ImageWidth(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_ImageWidth(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_ImageWidth_allowed(ty);}
};

//	Attribute ImageOffsetX class definition
class ImageOffsetXAttrib: public Tango::Attr
{
public:
	ImageOffsetXAttrib():Attr("ImageOffsetX",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~ImageOffsetXAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_ImageOffsetX(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_ImageOffsetX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_ImageOffsetX_allowed(ty);}
};

//	Attribute ImageOffsetY class definition
class ImageOffsetYAttrib: public Tango::Attr
{
public:
	ImageOffsetYAttrib():Attr("ImageOffsetY",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~ImageOffsetYAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_ImageOffsetY(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_ImageOffsetY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_ImageOffsetY_allowed(ty);}
};

//	Attribute PixelFormat class definition
class PixelFormatAttrib: public Tango::Attr
{
public:
	PixelFormatAttrib():Attr("PixelFormat",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~PixelFormatAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_PixelFormat(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_PixelFormat(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_PixelFormat_allowed(ty);}
};

//	Attribute PacketDelay class definition
class PacketDelayAttrib: public Tango::Attr
{
public:
	PacketDelayAttrib():Attr("PacketDelay",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~PacketDelayAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_PacketDelay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->write_PacketDelay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_PacketDelay_allowed(ty);}
};

//	Attribute Image class definition
class ImageAttrib: public Tango::ImageAttr
{
public:
	ImageAttrib():ImageAttr("Image",
			Tango::DEV_USHORT, Tango::READ, 4096, 4096) {};
	~ImageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<JaiGenicamDS *>(dev))->read_Image(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<JaiGenicamDS *>(dev))->is_Image_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command start class definition
class startClass : public Tango::Command
{
public:
	startClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	startClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~startClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<JaiGenicamDS *>(dev))->is_start_allowed(any);}
};

//	Command stop class definition
class stopClass : public Tango::Command
{
public:
	stopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	stopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~stopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<JaiGenicamDS *>(dev))->is_stop_allowed(any);}
};

//	Command Off class definition
class OffClass : public Tango::Command
{
public:
	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<JaiGenicamDS *>(dev))->is_Off_allowed(any);}
};

//	Command On class definition
class OnClass : public Tango::Command
{
public:
	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<JaiGenicamDS *>(dev))->is_On_allowed(any);}
};

//	Command GetCameraList class definition
class GetCameraListClass : public Tango::Command
{
public:
	GetCameraListClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetCameraListClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetCameraListClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<JaiGenicamDS *>(dev))->is_GetCameraList_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<JaiGenicamDS *>(dev))->is_Reset_allowed(any);}
};

//	Command GetNodeMap class definition
class GetNodeMapClass : public Tango::Command
{
public:
	GetNodeMapClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetNodeMapClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetNodeMapClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<JaiGenicamDS *>(dev))->is_GetNodeMap_allowed(any);}
};


/**
 *	The JaiGenicamDSClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  JaiGenicamDSClass : public Tango::DeviceClass
#else
class JaiGenicamDSClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(JaiGenicamDSClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDSClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static JaiGenicamDSClass *init(const char *);
		static JaiGenicamDSClass *instance();
		~JaiGenicamDSClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		JaiGenicamDSClass(string &);
		static JaiGenicamDSClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	JaiGenicamDS_H
