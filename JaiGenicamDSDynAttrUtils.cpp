/*----- PROTECTED REGION ID(JaiGenicamDS::DynAttrUtils.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        JaiGenicamDSDynAttrUtils.cpp
//
// description : Dynamic attributes utilities file for the JaiGenicamDS class
//
// project :     JaiGenicamDS
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <JaiGenicamDS.h>
#include <JaiGenicamDSClass.h>

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::DynAttrUtils.cpp

//================================================================
//  Attributes managed are:
//================================================================
//  LongDynAttr    |  Tango::DevLong	Scalar
//  DoubleDynAttr  |  Tango::DevDouble	Scalar
//  StringDynAttr  |  Tango::DevString	Scalar
//================================================================

namespace JaiGenicamDS_ns
{
//=============================================================
//	Add/Remove dynamic attribute methods
//=============================================================

//--------------------------------------------------------
/**
 *	Add a LongDynAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void JaiGenicamDS::add_LongDynAttr_dynamic_attribute(string attname)
{
	//	Attribute : LongDynAttr
	LongDynAttrAttrib	*longdynattr = new LongDynAttrAttrib(attname);
	Tango::UserDefaultAttrProp	longdynattr_prop;
	//	description	not set for LongDynAttr
	//	label	not set for LongDynAttr
	//	unit	not set for LongDynAttr
	//	standard_unit	not set for LongDynAttr
	//	display_unit	not set for LongDynAttr
	//	format	not set for LongDynAttr
	//	max_value	not set for LongDynAttr
	//	min_value	not set for LongDynAttr
	//	max_alarm	not set for LongDynAttr
	//	min_alarm	not set for LongDynAttr
	//	max_warning	not set for LongDynAttr
	//	min_warning	not set for LongDynAttr
	//	delta_t	not set for LongDynAttr
	//	delta_val	not set for LongDynAttr
	
	/*----- PROTECTED REGION ID(JaiGenicamDS::att_LongDynAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::att_LongDynAttr_dynamic_attribute
	longdynattr->set_default_properties(longdynattr_prop);
	//	Not Polled
	longdynattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	LongDynAttr_data.insert(make_pair(attname, 0));
	add_attribute(longdynattr);
}
//--------------------------------------------------------
/**
 *	remove a LongDynAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed and added.
 */
//--------------------------------------------------------
void JaiGenicamDS::remove_LongDynAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevLong>::iterator ite;
    if ((ite=LongDynAttr_data.find(attname))!=LongDynAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(JaiGenicamDS::remove_LongDynAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::remove_LongDynAttr_dynamic_attribute
		LongDynAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a DoubleDynAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void JaiGenicamDS::add_DoubleDynAttr_dynamic_attribute(string attname)
{
	//	Attribute : DoubleDynAttr
	DoubleDynAttrAttrib	*doubledynattr = new DoubleDynAttrAttrib(attname);
	Tango::UserDefaultAttrProp	doubledynattr_prop;
	//	description	not set for DoubleDynAttr
	//	label	not set for DoubleDynAttr
	//	unit	not set for DoubleDynAttr
	//	standard_unit	not set for DoubleDynAttr
	//	display_unit	not set for DoubleDynAttr
	//	format	not set for DoubleDynAttr
	//	max_value	not set for DoubleDynAttr
	//	min_value	not set for DoubleDynAttr
	//	max_alarm	not set for DoubleDynAttr
	//	min_alarm	not set for DoubleDynAttr
	//	max_warning	not set for DoubleDynAttr
	//	min_warning	not set for DoubleDynAttr
	//	delta_t	not set for DoubleDynAttr
	//	delta_val	not set for DoubleDynAttr
	
	/*----- PROTECTED REGION ID(JaiGenicamDS::att_DoubleDynAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::att_DoubleDynAttr_dynamic_attribute
	doubledynattr->set_default_properties(doubledynattr_prop);
	//	Not Polled
	doubledynattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	DoubleDynAttr_data.insert(make_pair(attname, 0.0));
	add_attribute(doubledynattr);
}
//--------------------------------------------------------
/**
 *	remove a DoubleDynAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed and added.
 */
//--------------------------------------------------------
void JaiGenicamDS::remove_DoubleDynAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=DoubleDynAttr_data.find(attname))!=DoubleDynAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(JaiGenicamDS::remove_DoubleDynAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::remove_DoubleDynAttr_dynamic_attribute
		DoubleDynAttr_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a StringDynAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void JaiGenicamDS::add_StringDynAttr_dynamic_attribute(string attname)
{
	//	Attribute : StringDynAttr
	StringDynAttrAttrib	*stringdynattr = new StringDynAttrAttrib(attname);
	Tango::UserDefaultAttrProp	stringdynattr_prop;
	//	description	not set for StringDynAttr
	//	label	not set for StringDynAttr
	//	unit	not set for StringDynAttr
	//	standard_unit	not set for StringDynAttr
	//	display_unit	not set for StringDynAttr
	//	format	not set for StringDynAttr
	//	max_value	not set for StringDynAttr
	//	min_value	not set for StringDynAttr
	//	max_alarm	not set for StringDynAttr
	//	min_alarm	not set for StringDynAttr
	//	max_warning	not set for StringDynAttr
	//	min_warning	not set for StringDynAttr
	//	delta_t	not set for StringDynAttr
	//	delta_val	not set for StringDynAttr
	
	/*----- PROTECTED REGION ID(JaiGenicamDS::att_StringDynAttr_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::att_StringDynAttr_dynamic_attribute
	stringdynattr->set_default_properties(stringdynattr_prop);
	//	Not Polled
	stringdynattr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	char array[1];
	array[0] = '\0';
	StringDynAttr_data.insert(make_pair(attname, array));
	add_attribute(stringdynattr);
}
//--------------------------------------------------------
/**
 *	remove a StringDynAttr dynamic attribute.
 *
 *  parameter attname: attribute name to be removed and added.
 */
//--------------------------------------------------------
void JaiGenicamDS::remove_StringDynAttr_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevString>::iterator ite;
    if ((ite=StringDynAttr_data.find(attname))!=StringDynAttr_data.end())
    {
    	/*----- PROTECTED REGION ID(JaiGenicamDS::remove_StringDynAttr_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::remove_StringDynAttr_dynamic_attribute
		StringDynAttr_data.erase(ite);
	}
}


//============================================================
//	Tool methods to get pointer on attribute data buffer 
//============================================================
//--------------------------------------------------------
/**
 *	Return a pointer on LongDynAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevLong *JaiGenicamDS::get_LongDynAttr_data_ptr(string &name)
{
	map<string,Tango::DevLong>::iterator ite;
    if ((ite=LongDynAttr_data.find(name))==LongDynAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"JaiGenicamDS::get_LongDynAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on DoubleDynAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *JaiGenicamDS::get_DoubleDynAttr_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=DoubleDynAttr_data.find(name))==DoubleDynAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"JaiGenicamDS::get_DoubleDynAttr_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on StringDynAttr data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevString *JaiGenicamDS::get_StringDynAttr_data_ptr(string &name)
{
	map<string,Tango::DevString>::iterator ite;
    if ((ite=StringDynAttr_data.find(name))==StringDynAttr_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"JaiGenicamDS::get_StringDynAttr_data_ptr()");
    }
	return  &(ite->second);
}

} //	namespace
