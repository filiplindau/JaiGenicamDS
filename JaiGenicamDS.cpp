/*----- PROTECTED REGION ID(JaiGenicamDS.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        JaiGenicamDS.cpp
//
// description : C++ source for the JaiGenicamDS class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               JaiGenicamDS are implemented in this file.
//
// project :     JaiGenicamDS
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <JaiGenicamDS.h>
#include <JaiGenicamDSClass.h>
#include "JaiGenicamConnection.h"

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS.cpp

/**
 *  JaiGenicamDS class description:
 *    Control of Jai Genicam cameras
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  start         |  start
//  stop          |  stop
//  Off           |  off
//  On            |  on
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  ExposureTime     |  Tango::DevDouble	Scalar
//  Gain             |  Tango::DevDouble	Scalar
//  FrameRate        |  Tango::DevDouble	Scalar
//  ExternalTrigger  |  Tango::DevBoolean	Scalar
//  FrameCounter     |  Tango::DevLong64	Scalar
//  Image            |  Tango::DevUShort	Image  ( max = 4096 x 4096)
//================================================================

namespace JaiGenicamDS_ns
{
/*----- PROTECTED REGION ID(JaiGenicamDS::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::JaiGenicamDS()
 *	Description : Constructors for a Tango device
 *                implementing the classJaiGenicamDS
 */
//--------------------------------------------------------
JaiGenicamDS::JaiGenicamDS(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::constructor_1) ENABLED START -----*/
	this->camera_connection = NULL;
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::constructor_1
}
//--------------------------------------------------------
JaiGenicamDS::JaiGenicamDS(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::constructor_2) ENABLED START -----*/
	this->camera_connection = NULL;
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::constructor_2
}
//--------------------------------------------------------
JaiGenicamDS::JaiGenicamDS(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::constructor_3) ENABLED START -----*/
	this->camera_connection = NULL;
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void JaiGenicamDS::delete_device()
{
	DEBUG_STREAM << "JaiGenicamDS::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	if (this->camera_connection != NULL)
	{
		DEBUG_STREAM << "Deleting camera_connection" << endl;
		this->camera_connection->disconnect();
		delete this->camera_connection;
		this->camera_connection = NULL;
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::delete_device
	delete[] attr_ExposureTime_read;
	delete[] attr_Gain_read;
	delete[] attr_FrameRate_read;
	delete[] attr_ExternalTrigger_read;
	delete[] attr_FrameCounter_read;
	delete[] attr_Image_read;
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void JaiGenicamDS::init_device()
{
	DEBUG_STREAM << "JaiGenicamDS::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	if (mandatoryNotDefined)
		return;
	
	attr_ExposureTime_read = new Tango::DevDouble[1];
	attr_Gain_read = new Tango::DevDouble[1];
	attr_FrameRate_read = new Tango::DevDouble[1];
	attr_ExternalTrigger_read = new Tango::DevBoolean[1];
	attr_FrameCounter_read = new Tango::DevLong64[1];
	attr_Image_read = new Tango::DevUShort[4096*4096];

	/*----- PROTECTED REGION ID(JaiGenicamDS::init_device) ENABLED START -----*/
	
	//	Initialize device
	this->camera_connection = new ::JaiGenicamConnection_ns::JaiGenicamConnection(this, this->serial_number);
	DEBUG_STREAM << "Connecting to camera " << endl;
	this->camera_connection->connect();

	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::init_device
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void JaiGenicamDS::get_device_property()
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("serial_number"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on JaiGenicamDSClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		JaiGenicamDSClass	*ds_class =
			(static_cast<JaiGenicamDSClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize serial_number from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serial_number;
		else {
			//	Try to initialize serial_number from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serial_number;
		}
		//	And try to extract serial_number value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serial_number;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

	}

	/*----- PROTECTED REGION ID(JaiGenicamDS::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void JaiGenicamDS::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(JaiGenicamDS::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void JaiGenicamDS::always_executed_hook()
{
	INFO_STREAM << "JaiGenicamDS::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"JaiGenicamDS::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(JaiGenicamDS::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void JaiGenicamDS::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "JaiGenicamDS::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void JaiGenicamDS::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "JaiGenicamDS::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute ExposureTime related method
 *	Description: Exposure time of the capture in milliseconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_ExposureTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_ExposureTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_ExposureTime) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ExposureTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_ExposureTime
}
//--------------------------------------------------------
/**
 *	Write attribute ExposureTime related method
 *	Description: Exposure time of the capture in milliseconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_ExposureTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_ExposureTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_ExposureTime) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_ExposureTime
}
//--------------------------------------------------------
/**
 *	Read attribute Gain related method
 *	Description: Camera gain value. The unit depends on the specific camera implementation.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_Gain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_Gain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_Gain) ENABLED START -----*/
	//	Set the attribute value
//	int retval = this->camera_connection->get_gain(attr_Gain_read);
	double value;
	int retval = this->camera_connection->get_node_value("GainRaw", &value);
	*attr_Gain_read = (Tango::DevDouble)value;
	if (retval == 0)
	{
		attr.set_value(attr_Gain_read);
	}
	else
	{
		attr.set_value(attr_Gain_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}

	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_Gain
}
//--------------------------------------------------------
/**
 *	Write attribute Gain related method
 *	Description: Camera gain value. The unit depends on the specific camera implementation.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_Gain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_Gain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_Gain) ENABLED START -----*/
	int retval = this->camera_connection->set_node_value("GainRaw", w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}

	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_Gain
}
//--------------------------------------------------------
/**
 *	Read attribute FrameRate related method
 *	Description: Frame rate of the camera when free running
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_FrameRate(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_FrameRate(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_FrameRate) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FrameRate_read);
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_FrameRate
}
//--------------------------------------------------------
/**
 *	Write attribute FrameRate related method
 *	Description: Frame rate of the camera when free running
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_FrameRate(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_FrameRate(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_FrameRate) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_FrameRate
}
//--------------------------------------------------------
/**
 *	Read attribute ExternalTrigger related method
 *	Description: Select if external (true) or internal (false) triggering is to be used.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_ExternalTrigger(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_ExternalTrigger(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_ExternalTrigger) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ExternalTrigger_read);
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_ExternalTrigger
}
//--------------------------------------------------------
/**
 *	Write attribute ExternalTrigger related method
 *	Description: Select if external (true) or internal (false) triggering is to be used.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_ExternalTrigger(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_ExternalTrigger(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_ExternalTrigger) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_ExternalTrigger
}
//--------------------------------------------------------
/**
 *	Read attribute FrameCounter related method
 *	Description: Counts number of frames captured since starting acquisition. 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_FrameCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_FrameCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_FrameCounter) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FrameCounter_read);
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_FrameCounter
}
//--------------------------------------------------------
/**
 *	Read attribute Image related method
 *	Description: Latest captured image
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image max = 4096 x 4096
 */
//--------------------------------------------------------
void JaiGenicamDS::read_Image(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_Image(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_Image) ENABLED START -----*/
	//	Set the attribute value
	uint32_t image_width = 4096;
	uint32_t image_height = 4096;
	J_tIMAGE_INFO aq_image_info;
	int result;
	result = this->camera_connection->get_image_info(&aq_image_info);
	if (result < 0)
	{
		ERROR_STREAM << "get_image_info returned " << result << endl;
		attr.set_value(attr_Image_read, 0, 0);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
		return;
	}
	image_height = aq_image_info.iSizeY;
	image_width = aq_image_info.iSizeX;
	DEBUG_STREAM << "Image dimensions: " << image_width << "x" << image_height << endl;
	Tango::DevUShort* attr_Image_read_tmp = new Tango::DevUShort[image_width*image_height];
	result = this->camera_connection->get_image(&image_width, &image_height, (uint16_t*)attr_Image_read_tmp);
	DEBUG_STREAM << "get_image returned " << result << endl;
	if (result == 0)
	{
		attr.set_value(attr_Image_read_tmp, image_width, image_height, true);
	}
	else
	{
		attr.set_value(attr_Image_read, 0, 0);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_Image
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void JaiGenicamDS::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command start related method
 *	Description: Start camera acquisition
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::start()
{
	DEBUG_STREAM << "JaiGenicamDS::start()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::start) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->start_capture();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::start
}
//--------------------------------------------------------
/**
 *	Command stop related method
 *	Description: Stop camera acquisition
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::stop()
{
	DEBUG_STREAM << "JaiGenicamDS::stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::stop) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->stop_capture();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::stop
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: Disconnect from camera (e.g. to allow other software to use it)
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::off()
{
	DEBUG_STREAM << "JaiGenicamDS::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::off) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->disconnect();
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::off
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: Connect to camera
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::on()
{
	DEBUG_STREAM << "JaiGenicamDS::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::on) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->connect();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::on
}

/*----- PROTECTED REGION ID(JaiGenicamDS::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::namespace_ending
} //	namespace

