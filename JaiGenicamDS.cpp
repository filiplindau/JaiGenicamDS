/*----- PROTECTED REGION ID(JaiGenicamDS.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        JaiGenicamDS.cpp
//
// description : C++ source for the JaiGenicamDS class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               JaiGenicamDS are implemented in this file.
//
// project :     JaiGenicamDS
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <JaiGenicamDS.h>
#include <JaiGenicamDSClass.h>


/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS.cpp

/**
 *  JaiGenicamDS class description:
 *    Control of Jai Genicam cameras
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name   |  Method name
//================================================================
//  State          |  Inherited (no method)
//  Status         |  Inherited (no method)
//  start          |  start
//  stop           |  stop
//  Off            |  off
//  On             |  on
//  GetCameraList  |  get_camera_list
//  Reset          |  reset
//  GetNodeMap     |  get_node_map
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  ExposureTime   |  Tango::DevDouble	Scalar
//  Gain           |  Tango::DevDouble	Scalar
//  FrameRate      |  Tango::DevDouble	Scalar
//  TriggerSource  |  Tango::DevString	Scalar
//  FrameCounter   |  Tango::DevLong64	Scalar
//  TriggerMode    |  Tango::DevString	Scalar
//  ImageHeight    |  Tango::DevULong	Scalar
//  ImageWidth     |  Tango::DevULong	Scalar
//  ImageOffsetX   |  Tango::DevULong	Scalar
//  ImageOffsetY   |  Tango::DevULong	Scalar
//  PixelFormat    |  Tango::DevString	Scalar
//  PacketDelay    |  Tango::DevULong	Scalar
//  Image          |  Tango::DevUShort	Image  ( max = 4096 x 4096)
//================================================================

namespace JaiGenicamDS_ns
{
/*----- PROTECTED REGION ID(JaiGenicamDS::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::JaiGenicamDS()
 *	Description : Constructors for a Tango device
 *                implementing the classJaiGenicamDS
 */
//--------------------------------------------------------
JaiGenicamDS::JaiGenicamDS(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::constructor_1) ENABLED START -----*/
	this->camera_connection = NULL;
	this->image_buffers_p = NULL;
	this->image_width_v.clear();
	this->image_height_v.clear();
	this->n_buffers = 0;
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::constructor_1
}
//--------------------------------------------------------
JaiGenicamDS::JaiGenicamDS(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::constructor_2) ENABLED START -----*/
	this->camera_connection = NULL;
	this->image_buffers_p = NULL;
	this->image_width_v.clear();
	this->image_height_v.clear();
	this->n_buffers = 0;
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::constructor_2
}
//--------------------------------------------------------
JaiGenicamDS::JaiGenicamDS(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::constructor_3) ENABLED START -----*/
	this->camera_connection = NULL;
	this->image_buffers_p = NULL;
	this->image_width_v.clear();
	this->image_height_v.clear();
	this->n_buffers = 0;
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void JaiGenicamDS::delete_device()
{
	DEBUG_STREAM << "JaiGenicamDS::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	if (this->camera_connection != NULL)
	{
//		DEBUG_STREAM << "Disconnecting camera_connection" << endl;
		//this->camera_connection->disconnect();
		DEBUG_STREAM << "Deleting camera_connection" << endl;
		delete this->camera_connection;
		this->camera_connection = NULL;
		
	};
	if (this->image_buffers_p != NULL)
	{
		DEBUG_STREAM << "Deleting image buffers" << endl;
		for (int i=0; i<this->n_buffers; i++)
		{
			delete[] this->image_buffers_p[i];
		};
		delete[] this->image_buffers_p;
		this->image_buffers_p = NULL;
	};	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::delete_device
	delete[] attr_ExposureTime_read;
	delete[] attr_Gain_read;
	delete[] attr_FrameRate_read;
	delete[] attr_TriggerSource_read;
	delete[] attr_FrameCounter_read;
	delete[] attr_TriggerMode_read;
	delete[] attr_ImageHeight_read;
	delete[] attr_ImageWidth_read;
	delete[] attr_ImageOffsetX_read;
	delete[] attr_ImageOffsetY_read;
	delete[] attr_PixelFormat_read;
	delete[] attr_PacketDelay_read;
	delete[] attr_Image_read;
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void JaiGenicamDS::init_device()
{
	DEBUG_STREAM << "JaiGenicamDS::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	if (mandatoryNotDefined)
		return;
	
	attr_ExposureTime_read = new Tango::DevDouble[1];
	attr_Gain_read = new Tango::DevDouble[1];
	attr_FrameRate_read = new Tango::DevDouble[1];
	attr_TriggerSource_read = new Tango::DevString[1];
	attr_FrameCounter_read = new Tango::DevLong64[1];
	attr_TriggerMode_read = new Tango::DevString[1];
	attr_ImageHeight_read = new Tango::DevULong[1];
	attr_ImageWidth_read = new Tango::DevULong[1];
	attr_ImageOffsetX_read = new Tango::DevULong[1];
	attr_ImageOffsetY_read = new Tango::DevULong[1];
	attr_PixelFormat_read = new Tango::DevString[1];
	attr_PacketDelay_read = new Tango::DevULong[1];
	attr_Image_read = new Tango::DevUShort[4096*4096];

	/*----- PROTECTED REGION ID(JaiGenicamDS::init_device) ENABLED START -----*/
	
	//	Initialize device
	if (this->camera_connection == NULL)
	{
		delete this->camera_connection;
		this->camera_connection = NULL;
	}
	this->camera_connection = new ::JaiGenicamCameraControl_ns::JaiGenicamCameraControl(this->id_number);
	this->camera_connection->state_changed_signal.connect_member(this, &JaiGenicamDS::update_state);
	this->camera_connection->status_message_signal.connect_member(this, &JaiGenicamDS::update_status);
	this->camera_connection->error_signal.connect_member(this, &JaiGenicamDS::update_error);
	DEBUG_STREAM << "Connecting to camera " << endl;

	attribute_info_init_flag = false;

	*attr_ImageHeight_read = 1;
	*attr_ImageWidth_read = 1;
	*attr_ExposureTime_read = 0;
	*attr_Gain_read = 0;
	*attr_FrameRate_read = 0;
	*attr_TriggerSource_read = "";
	*attr_FrameCounter_read = 0;
	*attr_PacketDelay_read = 0;
	*attr_TriggerMode_read = "";


	this->n_buffers = 2;
	this->last_lock_buffer_ind = 0;
	this->image_buffers_p = new uint16_t*[n_buffers];
	for (int i=0; i<this->n_buffers; i++)
	{
		this->image_buffers_p[i] = new uint16_t[4096*4096];
		this->image_height_v.push_back(-1);
		this->image_width_v.push_back(-1);
	};
	DEBUG_STREAM << "Image buffers created " << endl;
	this->camera_connection->image_ready_signal.connect_member(this, &JaiGenicamDS::update_image);

	this->camera_connection->update_node_signal.connect_member(this, &JaiGenicamDS::update_attribute_info);

	this->write_presets();
	

	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::init_device
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void JaiGenicamDS::get_device_property()
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("id_number"));
	dev_prop.push_back(Tango::DbDatum("gain_node_name"));
	dev_prop.push_back(Tango::DbDatum("exposuretime_node_name"));
	dev_prop.push_back(Tango::DbDatum("triggersource_node_name"));
	dev_prop.push_back(Tango::DbDatum("triggermode_node_name"));
	dev_prop.push_back(Tango::DbDatum("width_node_name"));
	dev_prop.push_back(Tango::DbDatum("height_node_name"));
	dev_prop.push_back(Tango::DbDatum("offsetx_node_name"));
	dev_prop.push_back(Tango::DbDatum("offsety_node_name"));
	dev_prop.push_back(Tango::DbDatum("pixelformat_node_name"));
	dev_prop.push_back(Tango::DbDatum("packetdelay_node_name"));
	dev_prop.push_back(Tango::DbDatum("additional_node_list"));
	dev_prop.push_back(Tango::DbDatum("framerate_node_name"));
	dev_prop.push_back(Tango::DbDatum("node_preset_values"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on JaiGenicamDSClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		JaiGenicamDSClass	*ds_class =
			(static_cast<JaiGenicamDSClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize id_number from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  id_number;
		else {
			//	Try to initialize id_number from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  id_number;
		}
		//	And try to extract id_number value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  id_number;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize gain_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gain_node_name;
		else {
			//	Try to initialize gain_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gain_node_name;
		}
		//	And try to extract gain_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gain_node_name;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize exposuretime_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  exposuretime_node_name;
		else {
			//	Try to initialize exposuretime_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  exposuretime_node_name;
		}
		//	And try to extract exposuretime_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  exposuretime_node_name;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize triggersource_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  triggersource_node_name;
		else {
			//	Try to initialize triggersource_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  triggersource_node_name;
		}
		//	And try to extract triggersource_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  triggersource_node_name;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize triggermode_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  triggermode_node_name;
		else {
			//	Try to initialize triggermode_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  triggermode_node_name;
		}
		//	And try to extract triggermode_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  triggermode_node_name;

		//	Try to initialize width_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  width_node_name;
		else {
			//	Try to initialize width_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  width_node_name;
		}
		//	And try to extract width_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  width_node_name;

		//	Try to initialize height_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  height_node_name;
		else {
			//	Try to initialize height_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  height_node_name;
		}
		//	And try to extract height_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  height_node_name;

		//	Try to initialize offsetx_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  offsetx_node_name;
		else {
			//	Try to initialize offsetx_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  offsetx_node_name;
		}
		//	And try to extract offsetx_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  offsetx_node_name;

		//	Try to initialize offsety_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  offsety_node_name;
		else {
			//	Try to initialize offsety_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  offsety_node_name;
		}
		//	And try to extract offsety_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  offsety_node_name;

		//	Try to initialize pixelformat_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pixelformat_node_name;
		else {
			//	Try to initialize pixelformat_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pixelformat_node_name;
		}
		//	And try to extract pixelformat_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pixelformat_node_name;

		//	Try to initialize packetdelay_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  packetdelay_node_name;
		else {
			//	Try to initialize packetdelay_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  packetdelay_node_name;
		}
		//	And try to extract packetdelay_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  packetdelay_node_name;

		//	Try to initialize additional_node_list from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  additional_node_list;
		else {
			//	Try to initialize additional_node_list from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  additional_node_list;
		}
		//	And try to extract additional_node_list value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  additional_node_list;

		//	Try to initialize framerate_node_name from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  framerate_node_name;
		else {
			//	Try to initialize framerate_node_name from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  framerate_node_name;
		}
		//	And try to extract framerate_node_name value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  framerate_node_name;

		//	Try to initialize node_preset_values from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  node_preset_values;
		else {
			//	Try to initialize node_preset_values from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  node_preset_values;
		}
		//	And try to extract node_preset_values value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  node_preset_values;

	}

	/*----- PROTECTED REGION ID(JaiGenicamDS::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void JaiGenicamDS::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(JaiGenicamDS::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void JaiGenicamDS::always_executed_hook()
{
	INFO_STREAM << "JaiGenicamDS::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"JaiGenicamDS::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(JaiGenicamDS::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void JaiGenicamDS::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "JaiGenicamDS::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void JaiGenicamDS::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "JaiGenicamDS::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute ExposureTime related method
 *	Description: Exposure time of the capture in milliseconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_ExposureTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_ExposureTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_ExposureTime) ENABLED START -----*/
	//	Set the attribute value
	double value;	
	int retval = this->camera_connection->get_node_value(this->exposuretime_node_name, value);
	*attr_ExposureTime_read = (Tango::DevDouble)value;
	if (retval == 0)
	{
		attr.set_value(attr_ExposureTime_read);
	}
	else
	{
		attr.set_value(attr_ExposureTime_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}

	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_ExposureTime
}
//--------------------------------------------------------
/**
 *	Write attribute ExposureTime related method
 *	Description: Exposure time of the capture in milliseconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_ExposureTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_ExposureTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_ExposureTime) ENABLED START -----*/
	int retval = this->camera_connection->set_node_value(this->exposuretime_node_name, w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	DEBUG_STREAM << "camera_connection->set_node_value returned" << endl;
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_ExposureTime
}
//--------------------------------------------------------
/**
 *	Read attribute Gain related method
 *	Description: Camera gain value. The unit depends on the specific camera implementation.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_Gain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_Gain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_Gain) ENABLED START -----*/
	//	Set the attribute value
	double value;	
	int retval = this->camera_connection->get_node_value(this->gain_node_name, value);
	DEBUG_STREAM << "JaiGenicamDS::read_Gain retval " << retval << endl;
	if (retval == 0)
	{
		*attr_Gain_read = (Tango::DevDouble)value;
		attr.set_value(attr_Gain_read);
	}
	else
	{
		*attr_Gain_read = 10;
		attr.set_value(attr_Gain_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}

	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_Gain
}
//--------------------------------------------------------
/**
 *	Write attribute Gain related method
 *	Description: Camera gain value. The unit depends on the specific camera implementation.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_Gain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_Gain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_Gain) ENABLED START -----*/
	
	int retval = this->camera_connection->set_node_value(this->gain_node_name, w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_Gain
}
//--------------------------------------------------------
/**
 *	Read attribute FrameRate related method
 *	Description: Frame rate of the camera when free running
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_FrameRate(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_FrameRate(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_FrameRate) ENABLED START -----*/
	//	Set the attribute value
	double fps;
	int retval = this->camera_connection->get_framerate(fps);
	*attr_FrameRate_read = (Tango::DevDouble)fps;
	attr.set_value(attr_FrameRate_read);
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_FrameRate
}
//--------------------------------------------------------
/**
 *	Write attribute FrameRate related method
 *	Description: Frame rate of the camera when free running
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_FrameRate(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_FrameRate(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_FrameRate) ENABLED START -----*/
	int retval = this->camera_connection->set_node_value(this->framerate_node_name, w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_FrameRate
}
//--------------------------------------------------------
/**
 *	Read attribute TriggerSource related method
 *	Description: Select if external (true) or internal (false) triggering is to be used.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_TriggerSource(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_TriggerSource(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_TriggerSource) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->triggersource_node_name, value);
	*attr_TriggerSource_read = (Tango::DevString)this->node_map["triggersource"].enum_value_map[value].c_str();
	if (retval == 0)
	{
		attr.set_value(attr_TriggerSource_read);
	}
	else
	{
		attr.set_value(attr_TriggerSource_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_TriggerSource
}
//--------------------------------------------------------
/**
 *	Write attribute TriggerSource related method
 *	Description: Select if external (true) or internal (false) triggering is to be used.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_TriggerSource(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_TriggerSource(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_TriggerSource) ENABLED START -----*/
	int64_t w_val_i;
	// Check if the key value is in the map:
	DEBUG_STREAM << "Checking for " << w_val << ", counted " << this->node_map["triggersource"].enum_entry_map.count(w_val) << endl;

	if (this->node_map["triggersource"].enum_entry_map.count(w_val) > 0)
	{
		// Yes, then set the corresponding value to the node:
		w_val_i = this->node_map["triggersource"].enum_entry_map[w_val];
		int retval = this->camera_connection->set_node_value(this->triggersource_node_name, w_val_i);
		if (retval != 0)
		{
			attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
		}
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_TriggerSource
}
//--------------------------------------------------------
/**
 *	Read attribute FrameCounter related method
 *	Description: Counts number of frames captured since starting acquisition. 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_FrameCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_FrameCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_FrameCounter) ENABLED START -----*/
	//	Set the attribute value
	/*
	int64_t fc;
	int retval = this->camera_connection->get_framecounter(fc);
	*attr_FrameCounter_read = (Tango::DevLong64)fc;
	*/
	int64_t* fc_p = new int64_t;
	{
		std::lock_guard<std::mutex> lock(this->attr_mutex);	
		*fc_p = *attr_FrameCounter_read;
	};
	attr.set_value(fc_p, 1, 0, true);
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_FrameCounter
}
//--------------------------------------------------------
/**
 *	Read attribute TriggerMode related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_TriggerMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_TriggerMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_TriggerMode) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->triggermode_node_name, value);
	*attr_TriggerMode_read = (Tango::DevString)this->node_map["triggermode"].enum_value_map[value].c_str();
	if (retval == 0)
	{
		attr.set_value(attr_TriggerMode_read);
	}
	else
	{
		attr.set_value(attr_TriggerMode_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_TriggerMode
}
//--------------------------------------------------------
/**
 *	Write attribute TriggerMode related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_TriggerMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_TriggerMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_TriggerMode) ENABLED START -----*/
	int64_t w_val_i;
	// Check if the key value is in the map:
	DEBUG_STREAM << "Checking for " << w_val << ", counted " << this->node_map["triggermode"].enum_entry_map.count(w_val) << endl;

	if (this->node_map["triggermode"].enum_entry_map.count(w_val) > 0)
	{
		// Yes, then set the corresponding value to the node:
		w_val_i = this->node_map["triggermode"].enum_entry_map[w_val];
		int retval = this->camera_connection->set_node_value(this->triggermode_node_name, w_val_i);
		if (retval != 0)
		{
			attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
		}
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_TriggerMode
}
//--------------------------------------------------------
/**
 *	Read attribute ImageHeight related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_ImageHeight(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_ImageHeight(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_ImageHeight) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->height_node_name, value);
	*attr_ImageHeight_read = (Tango::DevULong)value;
	if (retval == 0)
	{
		attr.set_value(attr_ImageHeight_read);
	}
	else
	{
		attr.set_value(attr_ImageHeight_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_ImageHeight
}
//--------------------------------------------------------
/**
 *	Write attribute ImageHeight related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_ImageHeight(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_ImageHeight(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_ImageHeight) ENABLED START -----*/
	int retval;
	
	retval = this->camera_connection->set_node_value(this->height_node_name, (int64_t)w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	retval = this->camera_connection->update_nodeinfo(this->offsety_node_name);
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_ImageHeight
}
//--------------------------------------------------------
/**
 *	Read attribute ImageWidth related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_ImageWidth(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_ImageWidth(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_ImageWidth) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->width_node_name, value);
	*attr_ImageWidth_read = (Tango::DevULong)value;
	if (retval == 0)
	{
		attr.set_value(attr_ImageWidth_read);
	}
	else
	{
		attr.set_value(attr_ImageWidth_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_ImageWidth
}
//--------------------------------------------------------
/**
 *	Write attribute ImageWidth related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_ImageWidth(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_ImageWidth(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_ImageWidth) ENABLED START -----*/
	int retval = this->camera_connection->set_node_value(this->width_node_name, (int64_t)w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}

	retval = this->camera_connection->update_nodeinfo(this->offsetx_node_name);
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_ImageWidth
}
//--------------------------------------------------------
/**
 *	Read attribute ImageOffsetX related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_ImageOffsetX(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_ImageOffsetX(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_ImageOffsetX) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->offsetx_node_name, value);
	*attr_ImageOffsetX_read = (Tango::DevULong)value;
	if (retval == 0)
	{
		attr.set_value(attr_ImageOffsetX_read);
	}
	else
	{
		attr.set_value(attr_ImageOffsetX_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_ImageOffsetX
}
//--------------------------------------------------------
/**
 *	Write attribute ImageOffsetX related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_ImageOffsetX(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_ImageOffsetX(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_ImageOffsetX) ENABLED START -----*/
	int retval = this->camera_connection->set_node_value(this->offsetx_node_name, (int64_t)w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	retval = this->camera_connection->update_nodeinfo(this->width_node_name);
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_ImageOffsetX
}
//--------------------------------------------------------
/**
 *	Read attribute ImageOffsetY related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_ImageOffsetY(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_ImageOffsetY(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_ImageOffsetY) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->offsety_node_name, value);
	*attr_ImageOffsetY_read = (Tango::DevULong)value;
	if (retval == 0)
	{
		attr.set_value(attr_ImageOffsetY_read);
	}
	else
	{
		attr.set_value(attr_ImageOffsetY_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}

	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_ImageOffsetY
}
//--------------------------------------------------------
/**
 *	Write attribute ImageOffsetY related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_ImageOffsetY(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_ImageOffsetY(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_ImageOffsetY) ENABLED START -----*/
	int retval = this->camera_connection->set_node_value(this->offsety_node_name, (int64_t)w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	retval = this->camera_connection->update_nodeinfo(this->height_node_name);
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_ImageOffsetY
}
//--------------------------------------------------------
/**
 *	Read attribute PixelFormat related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_PixelFormat(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_PixelFormat(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_PixelFormat) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->pixelformat_node_name, value);
	*attr_PixelFormat_read = (Tango::DevString)this->node_map["pixelformat"].enum_value_map[value].c_str();
	if (retval == 0)
	{
		attr.set_value(attr_PixelFormat_read);
	}
	else
	{
		attr.set_value(attr_PixelFormat_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_PixelFormat
}
//--------------------------------------------------------
/**
 *	Write attribute PixelFormat related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_PixelFormat(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_PixelFormat(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_PixelFormat) ENABLED START -----*/
	int64_t w_val_i;
	// Check if the key value is in the map:
	DEBUG_STREAM << "Checking for " << w_val << ", counted " << this->node_map["pixelformat"].enum_entry_map.count(w_val) << endl;

	if (this->node_map["pixelformat"].enum_entry_map.count(w_val) > 0)
	{
		// Yes, then set the corresponding value to the node:
		w_val_i = this->node_map["pixelformat"].enum_entry_map[w_val];
		int retval = this->camera_connection->set_node_value(this->pixelformat_node_name, w_val_i);
		if (retval != 0)
		{
			attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
		}
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_PixelFormat
}
//--------------------------------------------------------
/**
 *	Read attribute PacketDelay related method
 *	Description: Controls the delay (in GEV timestamp counter unit) to insert between
 *               each packet for this stream channel.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::read_PacketDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_PacketDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_PacketDelay) ENABLED START -----*/
	//	Set the attribute value
	int64_t value;	
	int retval = this->camera_connection->get_node_value(this->packetdelay_node_name, value);
	*attr_PacketDelay_read = (Tango::DevULong)value;
	if (retval == 0)
	{
		attr.set_value(attr_PacketDelay_read);
	}
	else
	{
		attr.set_value(attr_PacketDelay_read);
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_PacketDelay
}
//--------------------------------------------------------
/**
 *	Write attribute PacketDelay related method
 *	Description: Controls the delay (in GEV timestamp counter unit) to insert between
 *               each packet for this stream channel.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void JaiGenicamDS::write_PacketDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::write_PacketDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(JaiGenicamDS::write_PacketDelay) ENABLED START -----*/
	int retval = this->camera_connection->set_node_value(this->packetdelay_node_name, (int64_t)w_val);
	if (retval != 0)
	{
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
	}
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::write_PacketDelay
}
//--------------------------------------------------------
/**
 *	Read attribute Image related method
 *	Description: Latest captured image
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image max = 4096 x 4096
 */
//--------------------------------------------------------
void JaiGenicamDS::read_Image(Tango::Attribute &attr)
{
	DEBUG_STREAM << "JaiGenicamDS::read_Image(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::read_Image) ENABLED START -----*/
	//	Set the attribute value
		
	Tango::DevULong width;
	Tango::DevULong height;
	int buffer_index;
	{
		std::lock_guard<std::mutex> lock_a(this->attr_mutex);
//		width = *this->attr_ImageWidth_read;
//		height = *this->attr_ImageHeight_read;
	};
	{
		std::lock_guard<std::mutex> lock_b(this->buffer_mutex);
		this->read_lock_buffer_ind = this->last_lock_buffer_ind;
		buffer_index = this->read_lock_buffer_ind;
	};
	width = this->image_width_v[buffer_index];
	height = this->image_height_v[buffer_index];

	// If width or height is < 0 the image is invalid:
	if (width > 0)
	{
		uint64_t size = height*width;
		Tango::DevUShort* attr_Image_read_tmp = new Tango::DevUShort[size];
	//	DEBUG_STREAM << "JaiGenicamDS::read_Image current buffer: " << buffer_index << ", width: " << width << ", height: " << height <<  endl;
		std::copy(this->image_buffers_p[buffer_index], this->image_buffers_p[buffer_index] + size, attr_Image_read_tmp);
		{
			std::lock_guard<std::mutex> lock_b(this->buffer_mutex);
			this->read_lock_buffer_ind = -1;
		}
		attr.set_value(attr_Image_read_tmp, width, height, true);
	}
	else
	{
		uint64_t size = 1;
		Tango::DevUShort* attr_Image_read_tmp = new Tango::DevUShort[size];
		{
			std::lock_guard<std::mutex> lock_b(this->buffer_mutex);
			this->read_lock_buffer_ind = -1;
		}
		attr.set_quality(Tango::AttrQuality::ATTR_INVALID);
		attr.set_value(attr_Image_read_tmp, 1, 1, true);
	};
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::read_Image
}

//--------------------------------------------------------
/**
 *	Method      : JaiGenicamDS::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void JaiGenicamDS::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(JaiGenicamDS::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command start related method
 *	Description: Start camera acquisition
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::start()
{
	DEBUG_STREAM << "JaiGenicamDS::start()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::start) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->start_capture();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::start
}
//--------------------------------------------------------
/**
 *	Command stop related method
 *	Description: Stop camera acquisition
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::stop()
{
	DEBUG_STREAM << "JaiGenicamDS::stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::stop) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->stop_capture();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::stop
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: Disconnect from camera (e.g. to allow other software to use it)
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::off()
{
	DEBUG_STREAM << "JaiGenicamDS::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::off) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->disconnect();
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::off
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: Connect to camera
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::on()
{
	DEBUG_STREAM << "JaiGenicamDS::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::on) ENABLED START -----*/
	
	//	Add your own code
	this->camera_connection->connect();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::on
}
//--------------------------------------------------------
/**
 *	Command GetCameraList related method
 *	Description: 
 *
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevVarStringArray *JaiGenicamDS::get_camera_list()
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "JaiGenicamDS::GetCameraList()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::get_camera_list) ENABLED START -----*/
	
	//	Add your own code
	argout = new Tango::DevVarStringArray();
	
	std::vector<std::string> cam_list;
	int retval = this->camera_connection->get_camera_list(cam_list);
	DEBUG_STREAM << "JaiGenicamDS::GetCameraList() camera list length " << cam_list.size() << endl;
	if (retval == 0)
	{
		argout->length(cam_list.size());
		for (int i=0; i<cam_list.size(); i++)
		{
			DEBUG_STREAM << "JaiGenicamDS::GetCameraList() camera " << i << ": " << cam_list[i] << endl;
			(*argout)[i] = CORBA::string_dup(cam_list[i].c_str());
		}
	}
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::get_camera_list
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: Send reset command to camera. There is a chance that 
 *               this clears a hung camera.
 *
 */
//--------------------------------------------------------
void JaiGenicamDS::reset()
{
	DEBUG_STREAM << "JaiGenicamDS::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::reset) ENABLED START -----*/
	
	this->camera_connection->reset();
	
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::reset
}
//--------------------------------------------------------
/**
 *	Command GetNodeMap related method
 *	Description: 
 *
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevVarStringArray *JaiGenicamDS::get_node_map()
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "JaiGenicamDS::GetNodeMap()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(JaiGenicamDS::get_node_map) ENABLED START -----*/
	std::vector<std::string> node_map_list;
	int retval = this->camera_connection->get_node_map_list(node_map_list);
	argout = new Tango::DevVarStringArray();
	
	DEBUG_STREAM << "JaiGenicamDS::GetCameraList() node list length " << node_map_list.size() << endl;
	if (retval == 0)
	{
		argout->length(node_map_list.size());
		for (int i=0; i<node_map_list.size(); i++)
		{
			(*argout)[i] = CORBA::string_dup(node_map_list[i].c_str());
		}
	}
	/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::get_node_map
	return argout;
}

/*----- PROTECTED REGION ID(JaiGenicamDS::namespace_ending) ENABLED START -----*/

//	Additional Methods
void JaiGenicamDS::update_attribute_info(::JaiGenicamCameraControl_ns::GenicamGenericNode generic_node)
{
	DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: Entering..." << endl;
	std::string tango_attribute_name;
	for (auto const x: this->node_map)
	{
		if (x.second.name == generic_node.name)
		{
			DEBUG_STREAM << "Found tango attribute name" << endl;
			tango_attribute_name = x.first;
			this->update_attribute_info(generic_node.name, tango_attribute_name, false);
		}
	}
} // JaiGenicamDS::update_attribute_info


void JaiGenicamDS::update_attribute_info(std::string genicam_name, std::string tango_attribute_name, bool set_memorized)
{
	DEBUG_STREAM << "------------------------------------------------------" << endl << " ---    Updating attribute info for " << tango_attribute_name << "    ---" << endl;

	::JaiGenicamCameraControl_ns::GenicamGenericNode generic_node;
	int retval;
	retval = this->camera_connection->get_node_info(genicam_name, generic_node);
	if (retval != 0)
	{
		ERROR_STREAM << "JaiGenicamDS::update_attribute_info: Error in get_node_info, returned" << retval << endl;
		this->node_map[tango_attribute_name] = generic_node;
		return;
	};
	
	Tango::AttributeConfigList_3* attr_config_list;
	Tango::AttributeConfig_3* attr_config;
	Tango::MultiAttribute* multi_attr;
	Tango::DevVarStringArray sa;
	// Generate corba string of the desired tango attribute name:
	sa.length(1);
	sa[0] = CORBA::string_dup(tango_attribute_name.c_str());
	
	DEBUG_STREAM << "Genicam node: " << generic_node.name << endl;
	DEBUG_STREAM << "Description: " << generic_node.description << endl;
	DEBUG_STREAM << "Valid: " << generic_node.valid << endl;
	
	// Get an attribute config list for this attribute (the list will have a length of 1)
	attr_config_list = this->get_attribute_config_3(sa);
	// The attribute configuration is in the buffer of this list:
	attr_config = attr_config_list->get_buffer();
	// Now we can set the various properties for the attribute
	attr_config->description = CORBA::string_dup(generic_node.description.c_str());
	if (generic_node.type == J_NODE_TYPE::J_IInteger)
	{
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Min value i: " << std::to_string(generic_node.min_value_i).c_str();
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Max value i: " << std::to_string(generic_node.max_value_i).c_str();

		Tango::DevLong int_value;
		Tango::DevLong mem_value;
		Tango::DevLong new_max_value;
		Tango::DevLong new_min_value;
		multi_attr = this->get_device_attr();
		multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_write_value(int_value);
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Write value: " << int_value;
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Mem value: " << multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_mem_value();
		if (set_memorized == true)
		{
			try
			{
				mem_value = std::stoi(multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_mem_value());
				DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "mem value converted";

				if (generic_node.min_value_i <= mem_value && generic_node.max_value_i >= mem_value)
				{
					retval = this->camera_connection->set_node_value(genicam_name, (int64_t)mem_value);
					if (retval != 0)
					{
						ERROR_STREAM << "JaiGenicamDS::update_attribute_info: Error in set_node_value, returned" << retval << endl;
					};
				};
			}
			catch (...)
			{
				DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Could not retrieve mem value";
			}
		}
		// Only update min, max if the values are consistent
		if (generic_node.min_value_i < generic_node.max_value_i)
		{
			attr_config->min_value = CORBA::string_dup(std::to_string(generic_node.min_value_i).c_str());
			attr_config->max_value = CORBA::string_dup(std::to_string(generic_node.max_value_i).c_str());
		}
		attr_config->unit = CORBA::string_dup(generic_node.unit.c_str());	
	}
	else if (generic_node.type == J_NODE_TYPE::J_IFloat)
	{
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Min value d: " << std::to_string(generic_node.min_value_d).c_str();
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Max value d: " << std::to_string(generic_node.max_value_d).c_str();
		// Get write value to check if the stored value is larger or smaller than the new max and min numbers.
		// We then need to modify the memorized value to avoid an exception.
		Tango::DevDouble double_value;
		Tango::DevDouble mem_value;
		Tango::DevDouble new_max_value;
		Tango::DevDouble new_min_value;
		multi_attr = this->get_device_attr();
		multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_write_value(double_value);
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Write value: " << double_value;
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Mem value: " << multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_mem_value();
		if (set_memorized == true)
		{
			try
			{
				mem_value = std::stod(multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_mem_value());
				DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "mem value d converted";

				if (generic_node.min_value_d <= mem_value && generic_node.max_value_d >= mem_value)
				{
					retval = this->camera_connection->set_node_value(genicam_name, (double)mem_value);
					if (retval != 0)
					{
						ERROR_STREAM << "JaiGenicamDS::update_attribute_info: Error in set_node_value, returned" << retval << endl;
					};
				};
			}
			catch (...)
			{
				DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Could not retrieve mem value d";
			}
		}
		/*
		retval = this->camera_connection->set_node_value(genicam_name, (double)double_value);
		if (retval != 0)
		{
			ERROR_STREAM << "JaiGenicamDS::update_attribute_info: Error in set_node_value, returned" << retval << endl;
		};
		double_value = stod(multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_mem_value());
		*/
		// Only update min, max if the values are consistent

		if (generic_node.min_value_d < generic_node.max_value_d)
		{
			if (double_value > generic_node.max_value_d)
			{
				multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).set_mem_value(std::to_string(generic_node.max_value_d));
				new_min_value = generic_node.min_value_d;
				new_max_value = double_value;
			}
			else if (double_value < generic_node.min_value_d)
			{
				multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).set_mem_value(std::to_string(generic_node.min_value_d));
				new_min_value = double_value;
				new_max_value = generic_node.max_value_d;
			}
			else
			{
				new_min_value = generic_node.min_value_d;
				new_max_value = generic_node.max_value_d;
			}					

			attr_config->min_value = CORBA::string_dup(std::to_string(new_min_value).c_str());
			attr_config->max_value = CORBA::string_dup(std::to_string(new_max_value).c_str());
		}
		attr_config->unit = CORBA::string_dup(generic_node.unit.c_str());	
	}
	else if (generic_node.type == J_NODE_TYPE::J_IEnumeration)
	{
		std::stringstream desc_stream;
		for (auto s : generic_node.enum_names)
		{
			desc_stream << s << ", ";
		};
		attr_config->unit = CORBA::string_dup(desc_stream.str().c_str());
		// Get write value to check if the stored value is larger or smaller than the new max and min numbers.
		// We then need to modify the memorized value to avoid an exception.
		Tango::DevString string_value;
		std::string mem_value;
		multi_attr = this->get_device_attr();
		multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_write_value(string_value);
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Write value: " << string_value;
		DEBUG_STREAM << "JaiGenicamDS::update_attribute_info: " << generic_node.name << " " << "Mem value: " << multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_mem_value();
		if (set_memorized == true)
		{
			mem_value = multi_attr->get_w_attr_by_name(tango_attribute_name.c_str()).get_mem_value().c_str();
			retval = this->camera_connection->set_node_value(genicam_name, mem_value);
			if (retval != 0)
			{
				ERROR_STREAM << "JaiGenicamDS::update_attribute_info: Error in set_node_value, returned" << retval << endl;
			};
		}		
	}

	// Finally write the config list back:
	this->set_attribute_config_3(*attr_config_list);

	this->node_map[tango_attribute_name] = generic_node;

	
} // JaiGenicamDS::update_attribute_info


void JaiGenicamDS::write_presets()
{
	DEBUG_STREAM << "JaiGenicamDS::write_presets: Entering write_presets" << endl;
	std::stringstream convert_stream;
	if (this->node_preset_values.empty() == false)
	{
		if (this->node_preset_values.size() % 2 != 0)
		{
			Tango::Except::throw_exception("PROPERTIES FAILURE", "Node preset list contains an odd number of items. Entries must be made in pairs", "write_presets");
		}
		std::string name;
		std::string value;
		int value_i;
		double value_d;
		std::string value_s;
		int retval;
		for (unsigned int i = 0;i < this->node_preset_values.size(); i = i + 2)
		{
			name = this->node_preset_values[i];
			value = this->node_preset_values[i+1];
			DEBUG_STREAM << "JaiGenicamDS::write_presets: Setting node " << name << " to " << value << endl;
			convert_stream.clear();
			convert_stream.str("");
			convert_stream << value;
			convert_stream >> value_i;
			if (convert_stream.fail() == false)
			{
				retval = this->camera_connection->set_node_value(name, (int64_t)value_i);
			}
			else
			{
				DEBUG_STREAM << "JaiGenicamDS::write_presets: not integer " << endl;
				convert_stream.clear();
//				convert_stream << value;
				convert_stream >> value_d;
				if (convert_stream.fail() == false)
				{
					retval = this->camera_connection->set_node_value(name, value_d);
				}
				else
				{
					DEBUG_STREAM << "JaiGenicamDS::write_presets: not double " << endl;
					value_s = value;
					retval = this->camera_connection->set_node_value(name, value_s);
				}
			}
			
			if (retval != 0)
			{
				ERROR_STREAM << "Error setting node " << name << " to " << value << ", returned " << retval << endl;
			}
		}
	}
}; // JaiGenicamDS::write_presets


void JaiGenicamDS::update_state(::JaiGenicamCameraControl_ns::CameraState camera_state)
{
	DEBUG_STREAM << "Entering update_state" << endl;
	switch (camera_state)
	{
	case ::JaiGenicamCameraControl_ns::CameraState::UNKNOWN_STATE:
		this->set_state(Tango::UNKNOWN);
		break;
	case ::JaiGenicamCameraControl_ns::CameraState::INIT_STATE:
		this->set_state(Tango::INIT);
		break;
	case ::JaiGenicamCameraControl_ns::CameraState::DISCONNECTED_STATE:
		this->set_state(Tango::OFF);
		break;
	case ::JaiGenicamCameraControl_ns::CameraState::IDLE_STATE:
		this->set_state(Tango::ON);
		if (this->attribute_info_init_flag == false)
		{
			std::string tango_attribute_name;
						
			tango_attribute_name = this->gain_node_name;
			this->update_attribute_info(tango_attribute_name, "gain", true);
			
			this->update_attribute_info(this->exposuretime_node_name, "exposuretime", true);
			this->update_attribute_info(this->triggermode_node_name, "triggermode", true);
			this->update_attribute_info(this->triggersource_node_name, "triggersource", true);
			this->update_attribute_info(this->width_node_name, "imagewidth", true);
			this->update_attribute_info(this->height_node_name, "imageheight", true);
			this->update_attribute_info(this->offsetx_node_name, "imageoffsetx", true);
			this->update_attribute_info(this->offsety_node_name, "imageoffsety", true);
			this->update_attribute_info(this->pixelformat_node_name, "pixelformat", true);
			this->update_attribute_info(this->packetdelay_node_name, "packetdelay", true);
			
			this->attribute_info_init_flag = true;
		};

		break;
	case ::JaiGenicamCameraControl_ns::CameraState::RUNNING_STATE:
		this->set_state(Tango::RUNNING);
		break;
	case ::JaiGenicamCameraControl_ns::CameraState::FAULT_STATE:
		this->set_state(Tango::FAULT);
		break;
	};
}; // JaiGenicamDS::update_state


void JaiGenicamDS::update_status(std::string camera_status)
{
	DEBUG_STREAM << "update_status: " << camera_status << endl;
	this->set_status(camera_status);
}; // JaiGenicamDS::update_status


void JaiGenicamDS::update_error(::JaiGenicamCameraControl_ns::GenicamErrorStruct error_data)
{
	ERROR_STREAM << "update_error: In state " << error_data.state_string << ", calling function " << error_data.calling_function << ", camera function " << error_data.camera_function << 
		" failed with error: " << error_data.error_message << ". Error code: " << error_data.retval << std::endl;
	std::stringstream error_origin;
	error_origin << "In state " << error_data.calling_state << ", calling function " << error_data.calling_function << ", camera function " << error_data.camera_function;
	if (this->get_state() != Tango::DevState::INIT)
	{
//		Tango::Except::throw_exception("HARDWARE_FAILURE", error_data.error_message, error_origin.str());
	};
	
}; // JaiGenicamDS::update_error


void JaiGenicamDS::update_image(int framecounter)
{
//	DEBUG_STREAM << "update_image entering..." << endl;
	uint32_t width;
	uint32_t height;
	uint16_t* image_p;
	int retval;
	int next_buffer_ind;
	// Double buffering scheme: Lock mutex for buffer lock, determine if read_image is reading the buffer, use this
	// to determine which buffer should be written to. Release lock and write the buffer.
	{
		std::lock_guard<std::mutex> lock_b(this->buffer_mutex);
		next_buffer_ind = this->last_lock_buffer_ind;
		next_buffer_ind = (next_buffer_ind + 1) % this->n_buffers;
		while (next_buffer_ind == this->read_lock_buffer_ind)
		{
			next_buffer_ind = (next_buffer_ind + 1) % this->n_buffers;
		}
		this->write_lock_buffer_ind = next_buffer_ind;
	};
	retval = this->camera_connection->get_image(width, height, this->image_buffers_p[next_buffer_ind]);
	this->image_height_v[next_buffer_ind] = height;
	this->image_width_v[next_buffer_ind] = width;
	{
		std::lock_guard<std::mutex> lock_a(this->attr_mutex);
		*this->attr_FrameCounter_read = framecounter;
	};
	{
		std::lock_guard<std::mutex> lock_b(this->buffer_mutex);
		this->last_lock_buffer_ind = this->write_lock_buffer_ind;
		this->write_lock_buffer_ind = -1;
	};
//	DEBUG_STREAM << "update_image exit" << endl;
}; // JaiGenicamDS::update_image




/*----- PROTECTED REGION END -----*/	//	JaiGenicamDS::namespace_ending
} //	namespace
